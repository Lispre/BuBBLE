(defn flip ((func) (arg1 arg2)) (func arg2 arg1))

(defn curry (lambda (func arg1) (arg2)) (func arg1 arg2))

(defn compose (lambda (f g) (arg)) (f (g arg)))

(defn foldl (func accum lst)
  (if (null? lst)
      accum
      (foldl func (func accum (car lst)) (cdr lst))))

(defn foldr (func accum lst)
  (if (null? lst)
      accum
      (func (car lst) (foldr func accum (cdr lst)))))

(defn unfold (func init pred)
  (if (pred init)
      (cons init '())
      (cons init (unfold func (func init) pred))))


(defn fold (f a l) 
    (foldl f a l))
    
(defn reduce (f a l) 
    (fold f a l))


(defn max (x  num-list) 
    (fold (y z) (if (> y z) y z)) 
                    x 
                    (cons 0 num-list))

(defn min (x  num-list) 
    (fold (y z) (if (< y z) y z)) 
                    x 
                    (cons 536870911 num-list))


(defn length (lst)        
    (fold (x y) (+ x 1)) 0 lst)

(defn append (lst lsts)  
    (foldr (flip (curry foldr cons)) lst lsts))

(defn reverse (list) 
    (cdr (foldl (flip cons) '() list)))


(defn mem-helper (lambda (pred op) (acc next)) 
    (if (and (not acc) (pred (op next))) next acc))

(defn memq (obj lst)  
    (fold (mem-helper (curry eq? obj) id) #f lst))

(defn memv (obj lst)       
    (fold (mem-helper (curry eqv? obj) id) #f lst))


(defn assq (obj alist)     
    (fold (mem-helper (curry eq? obj) car) #f alist))

(defn assv (obj alist)   
    (fold (mem-helper (curry eqv? obj) car) #f alist))

(defn assoc (obj alist)   
    (fold (mem-helper (curry equal? obj) car) #f alist))


(defn map (func lst)     
    (foldr (x y) (cons (func x) y)) '() lst)



(load "/Users/Ninjacop123/BuBBLE/lib/stdlib.ble")